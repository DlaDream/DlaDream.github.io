---
layout:     post
title:      Linux-shell
subtitle:   Linux简单命令学习笔记
date:       2019-9-20
author:     DlaDream
header-img: img/post-bg-kuaidi.jpg
catalog: true
tags:
     - Linux
       
---

## Linux  基本命令学习

> 这是我Linux课程学习时做的笔记，涉及内容有限，日后学习时会更新。



### 登录Linux系统

​    Linux系统有两种账户：一般用户、超级用户；这两种不同的用户有不同的权限，可以根据命令提示符进行判断是那种用户。

- 超级用户：`$`
- 一般用户：`#`

> 在Ubuntu中可以使用 `sudo  su`进入超级用户状态，使用`su  name`可以进入一般用户name状态

​    如果需要修改密码，可以使用`passwd`指令进行修改密码；其中超级用户可以修改任何人的密码，使用方式是：处于超级用户状态下，使用指令`passwd name`就可以修改name的密码。



### 退出Linux系统

   可以使用`exit` 指令或者`Ctrl+D`退出Linux系统；此外还有一些常用的指令如下：

- reboot：重启
- shutdown now：立刻关机
- shutdown time：过time时间后关机
- halt -t：立刻关机



> 使用关闭系统的指令主要是为了防止缓冲区中的数据没有写入磁盘，从而导致数据丢失的问题。



### who指令

​    who指令用于显示有哪些使用者正在使用此台“电脑”，默认状态可以显示以下信息：

- 登录用户名
- 使用的终端设备
- 登录到系统的时间



### cat、more、less指令

   这三个指令都是用来在终端中查看文件，但是每个指令各有特色。

**cat**

​    语法：`cat [-option] filename`,其中`option`常用的有以下几种：

- -n：输出内容的同时，给每行加上行号
- -b：作用和`-n`一样，但是不给空行加行号
- -s：在内容中存在两行或者两行以上的空行的时候，压缩空行到一行

> 此外`cat`指令还可以用来创建一个文件，并向文件中写入内容，这需要配合输入重定向符号`>`来实现，演示如下：

![cat指令演示](https://i.loli.net/2019/09/19/X4zWNAERadMGfnI.png)

其中`cat > test.txt`将终端输入的内容重定向到test.txt文件中，在输入过程中用`Ctrl+D`来结束输入

基于上面的方法，`cat`指令也可以用来将多个文件合并为一个文件：

`cat file1  file2  file3 > file4`

但是如果你向将file1和file2的内容合并，这时候上面的方法就不适用了，但是可以使用追加重定向符号`>>`来实现：

使用`cat test2.txt >> test.txt`将test2.txt的内容追加到test.txt中

![追加重定向](https://i.loli.net/2019/09/19/o9r2JbPvuDA6SB5.png)



**more**

   more指令一次显示一屏的信息，回车可以换一行，空格可以换一页；语法格式`more [-option]   filename`,主要的`option`有下面几个：

- -d：提示用户，在终端下方会显示*[Press space to continue, q to quit]*
- -f：计算实际的行数（有些行由于太长，一行无法显示而被分为两行或者两行以上）
- -s：压缩空行，遇到两行或者两行以上的空行，会压缩至一行
- +/：在文件中搜索这个字符，然后从这个字符开始显示
- +num：从第num行开始显示



**less**

​    less和more相比较，增加了前翻的功能；语法是`less [-option]  filename`

有趣的是`less`提供了比`more`更多的功能，列举如下：

- `less`支持光标前后翻动
- 可以用行号或者百分比作为书签来浏览文件
- 可以使用-M看到更多关于文档的信息，比如：行数、当前所处的行数等
  ![](https://i.loli.net/2019/09/19/bGe4mpui3QlOxYh.png)
- 可以使用！运行其他的程序，比如使用`wc`进行字数统计：
  在终端输入：`！ wc  .bashrc`后效果如下：
  ![](https://i.loli.net/2019/09/19/bH9nujpYfATgV7w.png)
  显示完成操作，等待按下回车键，重新回到原来的less查看文档界面
- /用来查找一个单词或者其他的内容，搜索到的目标会高亮

> ！的普遍意义是运行
>
> /   的普遍意义是搜索



### ls 指令

​    ls指令是十分常用的一个指令，用于查看文件或者目录信息；语法：`ls  [-option]  name`;其中常用的`option`主要有一下几种：

- -a：显示所有的文件，包括隐藏文件
- -l：显示文件的详细信息，包括：权限、大小、所属的组、修改日期等
- -R：递归显示子文档，比如：`ls  -R  /usr/bin` 则会显示bin内的所有内容，假如bin中有一个文件夹名字为test，则test文件夹中的内容也会递归显示
- -S：将搜索结果按照从大到小的顺序排序
- -h：以K、M、G等人类易于看懂的为单位
- -r：颠倒搜索结果的显示顺序，配合`-S`使用可以实现从小到达排序输出
- -d：文件夹以文件夹的形式展示，而不递归显示
- -F：显示出文件的类型

> Ubuntu中使用`ls`指令的时候会默认加上`-color`参数，从而让不同类型的文件展示出不同的颜色；



列出有限个子文件夹的方法：-R参数配合-d参数使用；比如下面的命令可以练出第三层子目录中的所有内容：
`ls -dR   /*/*/*`

> ps:其实我觉的可以不适用-R参数，只是用-d参数就可以了



### cp、mv命令

   cp命令的作用的复制一个文件，原文件仍然存在；mv的作用是移动文件，原文件不在存在。

 **cp**

   cp命令的语法格式：`cp  [-option]  原文件  目标文件`；其中`option`常用的有一下几种：

- -b：例如使用`cp    file1    file2`的时候，如果file2本来就存在，那么是会覆盖掉file2中的内容；但是如果加上了-b参数，就会生成一个备份文件，名为file～
- -i：出现覆盖的时候会在终端进行询问
- -r：对目录复制的时候需要使用这个参数，递归操作

**注意**：cp指令的作用于目录时的两种不同的情况，比如：`cp file1  file2`，如果目录file2已经存在，那么cp指令会将file1及其内部的文件全部复制到file2目录下；如果file2目录不存在，那么会创建一个目录file2，并把file1内部的文件复制过去，此时file2内部已经没有名为file1的文件夹

![](https://i.loli.net/2019/09/19/UH9ManGsZBuyQkJ.png)

​     由于test1文件夹不存在，所以`cp -r test test1`时，先创建test1，并只将test内部的文件夹test2移动到test1中，此时test1文件夹中没有名为test的文件夹了

![](https://i.loli.net/2019/09/19/DJIRM1hGHibq3Vk.png)

​     test3文件夹在`cp -r   test   test3`指令执行时已经存在，所以cp指令将test文件夹及其内部的文件全部复制到test3目录下。

> mv对目录操作时也存在目标目录存在和不存在两种情况，而且和cp指令的处理方式相同



**mv**

   mv指令将文件移动位置，也可以用来更改文件的名称；常用`option`如下：

- -b：在移动时如果目标文件存在，则对目标文件做备份
- -v：在移动的时候作解释
- -f：如果目标文件存在就删除目标文件，不问使用者是否要移动

> mv指令中没有-r参数哦 :)

![](https://i.loli.net/2019/09/19/LFqlrtTIJevZgQf.png)

​     比如我们将test移动到test1下时，由于test1下原来就存在名为test的文件，所以对test文件做了备份：test～



### rm 指令

   rm指令用于删除文件，在使用时要非常小心，因为误删一个文件可能导致你的系统崩溃。

其中常用的`option`有下面几个：

- -f：强制性删除，不在终端询问是否要删除
- -r：递归删除，删除文件及其内部文件，如果要删除一个目录的时候必须使用这个参数
- -i：终端交互，询问是否要删除某个文件



### pwd 指令

   pwd用于显示当前用户所处的目录名称



### cd 指令

   进入文件目录；通常有几个通配符

- .：表示当前目录
- ..：表示上层目录
- ～：表示某个用户的默认目录，即：/name/home
  `cd ~` 和`cd`等价



### mkdir 、rmdir 指令

   mkdir指令用于创建目录；rmdir指令用于删除目录。

**mkdir**

​     mkdir一次可以创建一个或者多个目录；只要使用的参数如下：

- p：建立目录时若父目录不存在，则可以与子目录一起创建。比如：`mkdir   -p  test/test1/test2`;如果当前目录中不存在test目录，加上`-p`参数后会先创建test，后在test内创建test1，递归创建，形成目录的继承结构，但是如果不加上`-p`参数，此时系统会报错

![](https://i.loli.net/2019/09/20/F8CS2MeQkXvuf5h.png)

**rmdir**

​     rmdir指令用来删除目录，但是他要求目录内部必须为空，否则将无法删除；它常用的参数也是`-p`

- p：删除字母时一直向上递归删除其父目录，直到父目录不只有一个子目录时停止。

   ![](https://i.loli.net/2019/09/20/T1OWrIKaDJLgqUX.png)

​    从图片中可以看到，由于test目录下有两个子目录，所以在使用`rmdir -p test/test1/test2/test3`时一直向上递归删除，但是当递归删除test时发现test不为空目录（删除test1目录后仍然有test4）所以删除停止。

> rmdir删除目录的时候必须指定子目录的完整结构，而且子目录必须为空

 

### ln 指令

   ln指令的作用是创建链接，其中包括硬链接和软链接两种形式。

**硬链接**

​     ln后不加任何参数的时候默认是创建硬链接，其实硬链接可以理解为将文件copy一份产生一个副本，但是副本和原本之间内容保持同步，也就是说任何一个内容修改都会同步到另外一个文件中，但是删除其中一个文件，另外一个文件仍然存在。

**软链接**

   `ln -s ` 可以产生软链接，软链接可以理解为快捷方式，它本身不占内存（除了快捷方式本身占得内存，里面没有存储真正的内容），因为是快捷方式，所以如果原文件被删除后，快捷方式也就失效；对快捷方式做出的修改会同步到原文件中，相当于制定了一个别名，通过这个别名可以访问原文件。

![](https://i.loli.net/2019/09/20/Px1GXCeTcbalMUH.png)

   我们创建了一个文件file，创建了一个硬链接file2，一个软链接file3，然后显示后发现file3的大小是4，而file和file2的大小相同，都是0（因为里面没有内容）

  ![](https://i.loli.net/2019/09/20/2zAYCoSXsydTkPJ.png)

​    我们对软链接的修改会同步到原文件中，同时对原文件的修改也会同步到硬链接产生的文件中，而且硬链接和原文件的大小总是保持一致

硬链接和软链接的区别：

- 硬链接必须在同一文件系统中创建（即原文件所在目录或者原文件所在目录的子目录中）；而软链接没有这个要求
- 硬链接大小总是和原文件保持一致；而软链接没有
- 硬链接不可以建立指向目录文件的链接；而软链接可以建立一个指向目录的链接

### find、grep 指令

​     find指令可以查找文件和目录，grep主要是配合正则表达式搜索文件内容。

**find**

​     find 查找对象   [-option]，其中常用的option有下面几种：

- -name：按照名字查找
- -type：查找某个类型的对象
- -mtime：查找m天以前被修改过的文件，配合+（表示大于）和-（表示小于）可以实现查找多少天内没被修改过的或者多少天内被修改过的文件。
  比如：`find  -mtime +3`   查找当前目录下，三天内没有被修改过的文件
               `find   -mtimr -3` 查找当前目录下，三天内刚被修改过的文件
- -atime：查找n天前被访问过的文件
- -exec cmd：执行cmd指令，命令要以"\\"结尾
- -size：按照文件大小查找
- -print：在显示查找结果的时候把查找的到的文件的路径也打印出来

eg：

- 查找/usr/bin下最近100天没有访问过的项目：`find   /usr/bin  -atime +100`
- 查找/usr/bin下24小时内修改过的文件：`find  /usr/bin  -mtime -1`



**grep**

​     在文件中查找字符串，可以配合正则表达式使用

常用的正则表达式：

- *：表示前面的字符出现0次或者多次
- .：表示一个除"\n"之外的字符
- ？：和"."表示的效果一样
- {x}：前导字符出现x次
- {x,y}：前导字符出现x～y次
- {x,}：前导字符至少出现x次
- {,y}：前导字符最多出现y次
- (xxx)：字符串xxx
- [a-z]或[xyz]：在[]范围内的某个字符
- [XYZ]+：表示[]内的某个字符至少出现一次
- \x：？或者\字符等，比如匹配？需要使用"\?",匹配\需要使用"\\\\"
- ^：匹配每行的开头字符，如果匹配a开头的行应该为"^a"
- $：匹配每行的结束字符，如果匹配a结束的行应该为"a$"；**注意^和$的位置**

> 还有很多正则表达式的规则，因为我还没有学到，所以就不在这里列出，如果后期我有时间学习会更新

**注意**：我在第一次使用`grep`指令配合正则表达式时，发现想匹配某个字符出现n次的时候（就是使用{x}进行匹配），无论怎么使用都不可以，甚至我的老师也不知道原因，都来我在网上查询之后才发现，**在shell中"{"和"}"都有特殊的含义，所以我们需要使用转义符"\\"进行转义。

![](https://i.loli.net/2019/09/20/2GMy5zpZmJ6ExfS.png)

​         从这个例子中我们可以看到，在没使用转义字符时，匹配3-7个相同的小写字母时没有显示任何结果，但是在使用转义字符时才可以匹配到正确的结果。

### chmod、chgrp、chown指令

​      这三条指令都是用来处理目录和文件安全性的，`chown`用于修改文件的所有者；`chgrp`用于修改文件所属的组别；`chown`用于修改文件的权限.

![](https://i.loli.net/2019/09/25/IN6MbEiUVytwuHX.png)

   第一个`dla`表示的是文件所有者，第二个`dla`表示文件所属的组；前面的`-rw-rw-rw-`中第一个`-`表示的是文件的类别，接下来的三个`rw-`表示的是文件所有者拥有的权限，再接下来的三个表示的是文件所属的组所拥有的权限；最后三个表示的是其它人对该文件所拥有的权限。

**chown**

​      修改文件的拥有者。

```bash
chown newOwner filename
```

​    如果是修改一个目录的拥有者，这时可能连同目录下文件的拥有者也修改了，这时可以使用`-R`参数，递归修改。

**chgrp**

  修改文件所属的组.

```bash
chgrp newGroup filename
```

注意以下几点：

- 一个文件的所属的类别可以不是拥有者所在的类别。即：如果有一个文件属于`dla`，它所属的组也是`dla`，我们可以通过`chgrp`修改它的组，使他属于另外一个组，比如：`root`
- 修改的时候`newOwner`和`newGroup`必须存在，否则会报错。
- `chown`和`chgrp`只能够`root`用户使用

**chmod**

​    修改文件的权限，文件的权限的对象有三种：文件拥有者、文件所属的组、其它。文件权限的类别有三种:

- `r`：可以读。对于文件来说是可以访问内容，对于目录来说是可以浏览该目录下的内容(比如用`ls`指令)。
- `w`：可以写。对于文件来说是可以修改文件内容，对于目录来说是可以在目录中增加、删减文件。
- `x`：可以执行。对于文件来说是可以执行，对于目录来说是是否可以进入。

上面的权限也可以用数字法表示：

- 4：表示`r`,因为权限矩阵是`rwx`，`r`对应的是`100`，即是十进制的4
- 2：表示`w`
- 1：表示`x`

> chmod 可以每个用户使用

   下面是使用样例：

![](https://i.loli.net/2019/09/25/DF8i3VHOSNdLgbk.png)

   首先我们创建了一个文件`file`，然后查看权限发现权限矩阵是：`rw-rw-rw-`，其中`-`表示不具有这个权限。

![](https://i.loli.net/2019/09/25/162KHlmFSAJjuoB.png)

   我们执行`chmod u+x file`即给file文件的文件所有者加上执行权限。我们可以使用`+`表示在原有基础上加上某个权限，使用`-`表示在原有的基础上减去某个权限。其中`u g o`表示的含义如下：

- `u`：表示文件的所有者
- `g`：表示文件所属的组
- `o`：表示其它
- `a`：表示这三者都是

   下面我们说一些值得注意的情况。

- 目录的`x`权限表示是否可以进入目录，当目录没有这个权限的时候就无法进入这个目录。
  ![](https://i.loli.net/2019/09/25/6De2PuHa8ES3sBO.png)

  我们将test文件拥有者的执行权限拿掉之后，就进不如test文件了。

- 目录的`r`权限表示目录内容是否可以被浏览。
  ![](https://i.loli.net/2019/09/25/1RGfJcy9opIkF8q.png)

  我们拿去test的文件拥有者的r权限后，仍然可以进入test文件夹，但是在使用`ls`指令浏览目录中的内容的时候被拒绝了。

- 目录的`w`权限表示是否可以在目录中创建或者删除文件。
  ![](https://i.loli.net/2019/09/25/RWeaZqIx2T4QtBc.png)

  我们拿掉test文件拥有者的w权限后，仍然可以进入test，而且可以使用`ls`浏览test内的内容，但是却不能够创建内容。



### fdisk、df、du指令

​     这三个都是对磁盘存储进行操作的命令。

**fdisk**

​     `fdisk`是Linux的分区表操作命令，必须在`root`用户权限下才可以运行。

```bash
fdisk -l
```

![](https://i.loli.net/2019/09/26/71DHRyKYMBhc8eQ.png)

可以显示详细的分区信息。

> 经过测试，貌似`fdisk`必须配合某个参数同时使用，如果仅仅只是使用`sudo fdisk`则会出现报错

`df`

  显示磁盘的使用情况，包括系统配置的每一个磁盘当前被占用的大小

![](https://i.loli.net/2019/09/26/ih8JqkgZPofpem2.png)

> fdisk和df命令的功能类似



`du`

  命令提供对每个**目录**的文件空间使用情况的估评，在默认情况下测量的单位是**块的数目**。**默认会递归显示。**

- `h`：以人类易于读懂的形式显示大小

- `a`：显示文件和目录的块数
  ![](https://i.loli.net/2019/09/26/53PRvYszNcSeXkV.png)

  默认情况下，`du`仅仅显示的是目录所占的块数信息，但是加上`-a`参数后会显示目录和文件的所占块数信息。

- `--block-size=SIZE`：以SIZE所指定字节的大小为块的大小进行显示输出。

- `max-depth=N`：因为`du`默认会递归的显示，可以使用这个选项限制递归的最大深度。



### ps、kill命令

   ps、kill都是进程命令。

**ps**

   显示系统中活动进程的状态信息。使用语法：`ps -option PID`，常用的option如下：

- `l`：以长列表形式显示进程的状态信息
- `a`：显示所有活动进程的状态信息
- `u`：列出详细信息，包括起始时间、内存占用、cpu占用等
- `x`：打印前台和后台的活动，包括其他使用者的进程
- `aux`：这是一个组合形式，即打印前台和后台的所有进程的详细信息，和`top`达到类似的效果

![](https://i.loli.net/2019/09/26/Qo1gqXhdNrMn3t6.png)

其中里面的部分参数含义如下：

- `UID`：用户标识符
- `PID`：进程标识符
- `PPID`：父进程标识符
- `PRI`：进程优先级
- `TTY`：进程对应的终端号
- `TIME`：进程已使用cpu的时间
- `CMD`：启动该进程的命令名称

`ps  -aux|grep  `使用管道可以仅列出需要的进程

![](https://i.loli.net/2019/09/26/gWfsQG4BvV8dtma.png)

  当然也可以配合`more`、`less`指令方便查阅

**top**

   查看系统中不同进程占用cpu、内存状况，它提供系统的实时状况。

  top命令常用的交互命令:

- 空格：立即更新显示
- `i`：不显示空闲的或者僵尸进程信息
- `n`：更改显示进程的数量
  ![](https://i.loli.net/2019/09/26/i9LJ6FfmPjpvqyN.png)
- `m`：更换内存信息的显示方式
- `t`：更换CPU状态的显示



**htop**

   与`top`指令很类似，但是可以交互式的查看进程。通过文字图形化的显示每个进程的cpu、内存使用量，swap使用量。

   `htop`不是系统默认安装的，需要额外安装。

![](https://i.loli.net/2019/09/26/2eLFlrhtTRs7MSU.png)

这就是`htop`命令使用后的窗口，可以点击某个指标，比如:CPU,然后就会安装CPU占用率将进程排序。



**kill**

   这个命令用于发送信号来结束进程。如果一个进程没有响应杀死命令，这也许就需要强制杀死，使用-9参数来执行。注意，使用强制杀死的时候一定要小心，因为进程没有时机清理现场，也许写入文件没有完成。

```bash
kill <pid>
kill  -9 <pid>
```



### &命令

   可以将进程放到后台执行，不占用当前终端。使用方法是在要运行程序的最后加上`&`字符。

![](https://i.loli.net/2019/09/26/PRbO2nQAuK5dgYc.png)

可以看出，我们在命令最好加上`&`后，当前终端就不被占用了，但是`yes`仍然在执行。

> yes的作用是不断输出y；/dev/null像是一个黑洞，任何送入里面的数据都会消失



### nice、renice命令

   这两个命令都是用来修改进程的优先级的，区别是使用的时间点不同。`nice`实在程序运行前修改进程的优先级，`renice`是在程序运行中修改进程的优先级。

**nice**

   常用的选项是：`- number`，加上由number指定的优先级。

Linux中进程的优先级分为`0~19`，数字越大表明优先级越低，即`0`级进程的优先级最高；进程默认优先级是10.

![](https://i.loli.net/2019/09/26/DI6VAsyq2Xk8K3Y.png)

​      我们通过`nice -10 nano file`将修改file文件这个进程的优先级设置为10，然后通过`htop`命令可以看到，进程的优先级变成了10.所以我们通过：`nice -number  进程命令`可以修改进程或者程序的优先级。



**renice**

​    允许修改一个正在运行进程的优先权，可以在命令执行时调整它的优先权。

![](https://i.loli.net/2019/09/26/FbRCX1N4rLG8kUM.png)

![](https://i.loli.net/2019/09/26/ZxuANHqQzYiVKsT.png)

可以看出，`+`表示在原有优先级上添加；`-`表示在原有优先级上减。但是有以下几点注意：

- 用户只能够对自己所有的进程使用`renice`命令

- root用户可以对所有用户的所有进程使用renice命令

- 只有root用户可以提高进程的优先权
  ![](https://i.loli.net/2019/09/26/c9baow1KzdlRE5f.png)

  可以看出，我们不在root状态下，尝试提高优先级的时候会提示权限不够。



### nohup命令

   一般以来一个进程的父进程终止后，那么子进程也会被终止，但是`nohup`指令可以使进程在**用户退出后仍然继续**，结果会写在用户自己的目录下的`nohup.out`中，也可以使用重定向输出到制定的文件中。

> 这个命令常用于服务器中，比如你想在服务器上训练一个模型，但是这个模型需要很长时间，这时候就可以使用这个命令，让进程在你退出当前账户后仍然可以运行，将结果写到指定位置。



### mount、umount

  mount命令的作用是加载文件系统，umount的作用是卸载一个文件系统。



### tar命令

​     tar是一个非常常用的命令，用来压缩或者解压文件。用法是：`tar [主选项+辅助选项]  文件或者目录 `

其中，主选项是必须有的，它告诉tar要做什么。

主选项有以下几种:

- `c`：创建一个压缩文件
- `x`：解压一个压缩文件
- `r`：把一个文件添加到压缩文件中
- `t`：列出压缩文件的内容
- `u`：更新文件，用新增的文件代替原来的文件。

辅助选项：

- `f`：使用档案文件或设备，这个选项通常是必选的
- `k`：保存已经存在的文件，解压的时候如果已经存在一个原文件，原文件不会被覆盖
- `v`：详细报告处理文件信息
- `z`：使用gzip进行压缩解压文件，如果使用gzip压缩文件，则必须使用gzip解压文件

常用的配合：

- `xvf(z)`：解压文件时，所以说解压文件就是`tar -xvf    解压文件  路径`
- `cvf(z)`：压缩文件时，所以说压缩文件就是`tar -cvf  name  被压缩文件`
- `tvf(z)`：查看被压缩的内容



### gzip命令

  gzip命令也是压缩命令，它和tar命令最主要的区别就是：**tar命令压缩后原文件仍然存在，gzip命令压缩后原文件不在存在**。语法：`gzip option  压缩文件(解压文件)名`

- `v`：显示文件名和压缩比
- `num`：制定num调整压缩速度，范围为`1~9`，1压缩速度最快，压缩比最小；9压缩速度最慢，压缩比最大
- `r`：递归处理
- `d`：将压缩文件解压

![](https://i.loli.net/2019/09/26/Z1WeSIMuDsGz28r.png)

可以看出，gzip压缩后原文件不复存在。

![](https://i.loli.net/2019/09/26/Cn1kQIdEgh5WBYF.png)

使用`-d`参数可以解压。

> gzip压缩后的文件后缀为`gz`

### unzip命令

​    `unzip`命令不是用来解压`gzip`产生的压缩包，而是用来解压`zip`压缩包，使用方法就是`unzip option 文件名`.

- `v`：查看压缩文件
- `d`：解压到制定文件夹中
- `n`：不覆盖原来的文件

















